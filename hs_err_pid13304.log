#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 130023424 bytes for G1 virtual space
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (os_windows.cpp:3528), pid=13304, tid=23340
#
# JRE version:  (20.0.2+9) (build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (20.0.2+9-78, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: c:\Users\Admin\.vscode\extensions\salesforce.salesforce-vscode-slds-2.0.9\lsp-2.0.9-executable.jar --PORT=56717

Host: 12th Gen Intel(R) Core(TM) i5-1235U, 12 cores, 7G,  Windows 11 , 64 bit Build 22621 (10.0.22621.3958)
Time: Mon Nov  4 14:05:43 2024 India Standard Time elapsed time: 0.028206 seconds (0d 0h 0m 0s)

---------------  T H R E A D  ---------------

Current thread (0x000002307b2be260):  JavaThread "Unknown thread" [_thread_in_vm, id=23340, stack(0x00000049df800000,0x00000049df900000)]

Stack: [0x00000049df800000,0x00000049df900000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6bc25a]
V  [jvm.dll+0x84971a]
V  [jvm.dll+0x84b315]
V  [jvm.dll+0x84ba13]
V  [jvm.dll+0x280e4f]
V  [jvm.dll+0x6b8fe9]
V  [jvm.dll+0x6adbca]
V  [jvm.dll+0x35b165]
V  [jvm.dll+0x363386]
V  [jvm.dll+0x3b400e]
V  [jvm.dll+0x3b4295]
V  [jvm.dll+0x32b86a]
V  [jvm.dll+0x32c68b]
V  [jvm.dll+0x8123df]
V  [jvm.dll+0x3c1261]
V  [jvm.dll+0x7fe103]
V  [jvm.dll+0x44ccaf]
